// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Telegram —á–∞—Ç
function openTelegram() {
    window.open('https://t.me/mixyesosii', '_blank');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å —Å–∏–≥–∞—Ä–µ—Ç–∞–º–∏
function openCigarettes() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–∞–π—Ç —Å —Ç–∞–±–∞—á–Ω—ã–º–∏ –∏–∑–¥–µ–ª–∏—è–º–∏
    window.open('https://www.ozon.ru/category/tabachnye-izdeliya-10566/', '_blank');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–∏–≤–æ–º –∏ –∞–ª–∫–æ–≥–æ–ª–µ–º
function openBeer() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–∞–π—Ç —Å –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–º–∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏
    window.open('https://www.perekrestok.ru/cat/alkogol', '_blank');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
function openDonation() {
    window.open('https://www.donationalerts.com/r/sasavotik', '_blank');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π
function toggleMusic() {
    const musicBtn = document.getElementById('musicToggle');
    const musicIcon = document.getElementById('musicIcon');
    const musicText = document.getElementById('musicText');
    
    if (!isPlaying) {
        // –í–∫–ª—é—á–∞–µ–º –º—É–∑—ã–∫—É
        try {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
            
            isPlaying = true;
            createPunkTrack();
            
            musicBtn.classList.remove('muted');
            musicBtn.classList.add('playing');
            musicIcon.textContent = 'üîä';
            musicText.textContent = '–ú–£–ó–´–ö–ê –í–ö–õ';
            musicBtn.title = '–í—ã–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
            const visualizer = document.getElementById('musicVisualizer');
            if (visualizer) {
                visualizer.classList.add('active');
            }
            
            console.log('–ü–∞–Ω–∫ –º—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏:', error);
            musicIcon.textContent = 'üîá';
            musicText.textContent = '–û–®–ò–ë–ö–ê –ê–£–î–ò–û';
            musicBtn.classList.add('muted');
        }
    } else {
        // –í—ã–∫–ª—é—á–∞–µ–º –º—É–∑—ã–∫—É
        isPlaying = false;
        
        if (audioContext) {
            audioContext.suspend();
        }
        
        musicBtn.classList.add('muted');
        musicBtn.classList.remove('playing');
        musicIcon.textContent = 'üîá';
        musicText.textContent = '–ú–£–ó–´–ö–ê –í–´–ö–õ';
        musicBtn.title = '–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        const visualizer = document.getElementById('musicVisualizer');
        if (visualizer) {
            visualizer.classList.remove('active');
        }
        
        console.log('–ü–∞–Ω–∫ –º—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Web Audio API
let audioContext = null;
let punkTrackSource = null;
let isPlaying = false;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–∫-—Ä–æ–∫ —Ç—Ä–µ–∫–∞ —Å –ø–æ–º–æ—â—å—é Web Audio API
function createPunkTrack() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞—Ä–∞–±–∞–Ω–Ω—ã–π —Ä–∏—Ç–º
    function playDrums() {
        const drumGain = audioContext.createGain();
        drumGain.connect(audioContext.destination);
        drumGain.gain.value = 0.3;
        
        function kickDrum() {
            const osc = audioContext.createOscillator();
            const gain = audioContext.createGain();
            
            osc.connect(gain);
            gain.connect(drumGain);
            
            osc.frequency.setValueAtTime(60, audioContext.currentTime);
            osc.frequency.exponentialRampToValueAtTime(20, audioContext.currentTime + 0.1);
            
            gain.gain.setValueAtTime(0.5, audioContext.currentTime);
            gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            osc.start(audioContext.currentTime);
            osc.stop(audioContext.currentTime + 0.1);
        }
        
        function snare() {
            const noise = audioContext.createBufferSource();
            const noiseBuffer = audioContext.createBuffer(1, audioContext.sampleRate * 0.1, audioContext.sampleRate);
            const data = noiseBuffer.getChannelData(0);
            
            for (let i = 0; i < data.length; i++) {
                data[i] = Math.random() * 2 - 1;
            }
            
            noise.buffer = noiseBuffer;
            
            const snareGain = audioContext.createGain();
            noise.connect(snareGain);
            snareGain.connect(drumGain);
            
            snareGain.gain.setValueAtTime(0.2, audioContext.currentTime);
            snareGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            noise.start(audioContext.currentTime);
        }
        
        // –ü–∞–Ω–∫ —Ä–∏—Ç–º: –±–æ—á–∫–∞ –Ω–∞ 1 –∏ 3, —Å–Ω–µ–π—Ä –Ω–∞ 2 –∏ 4
        function drumLoop() {
            if (!isPlaying) return;
            
            kickDrum(); // –ë–æ—á–∫–∞ –Ω–∞ 1
            setTimeout(() => {
                if (isPlaying) snare(); // –°–Ω–µ–π—Ä –Ω–∞ 2
            }, 250);
            setTimeout(() => {
                if (isPlaying) kickDrum(); // –ë–æ—á–∫–∞ –Ω–∞ 3
            }, 500);
            setTimeout(() => {
                if (isPlaying) snare(); // –°–Ω–µ–π—Ä –Ω–∞ 4
            }, 750);
            
            setTimeout(drumLoop, 1000); // –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        }
        
        drumLoop();
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞—Å–æ–≤—É—é –ª–∏–Ω–∏—é
    function playBass() {
        const bassGain = audioContext.createGain();
        bassGain.connect(audioContext.destination);
        bassGain.gain.value = 0.2;
        
        function bassNote(freq, duration) {
            const osc = audioContext.createOscillator();
            const gain = audioContext.createGain();
            
            osc.connect(gain);
            gain.connect(bassGain);
            
            osc.frequency.value = freq;
            osc.type = 'square';
            
            gain.gain.setValueAtTime(0.3, audioContext.currentTime);
            gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
            
            osc.start(audioContext.currentTime);
            osc.stop(audioContext.currentTime + duration);
        }
        
        function bassLoop() {
            if (!isPlaying) return;
            
            bassNote(82.41, 0.5);  // E2
            setTimeout(() => {
                if (isPlaying) bassNote(87.31, 0.5);  // F2
            }, 500);
            setTimeout(() => {
                if (isPlaying) bassNote(98.00, 0.5);  // G2
            }, 1000);
            setTimeout(() => {
                if (isPlaying) bassNote(82.41, 0.5);  // E2
            }, 1500);
            
            setTimeout(bassLoop, 2000);
        }
        
        bassLoop();
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥–∏—Ç–∞—Ä–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã
    function playGuitar() {
        const guitarGain = audioContext.createGain();
        guitarGain.connect(audioContext.destination);
        guitarGain.gain.value = 0.15;
        
        function powerChord(freq1, freq2, duration) {
            [freq1, freq2].forEach(freq => {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                const distortion = audioContext.createWaveShaper();
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–∏—Å—Ç–æ—Ä—à–Ω–∞
                const samples = 44100;
                const curve = new Float32Array(samples);
                const deg = Math.PI / 180;
                for (let i = 0; i < samples; i++) {
                    const x = (i * 2) / samples - 1;
                    curve[i] = ((3 + 20) * x * 20 * deg) / (Math.PI + 20 * Math.abs(x));
                }
                distortion.curve = curve;
                distortion.oversample = '4x';
                
                osc.connect(distortion);
                distortion.connect(gain);
                gain.connect(guitarGain);
                
                osc.frequency.value = freq;
                osc.type = 'square';
                
                gain.gain.setValueAtTime(0.1, audioContext.currentTime);
                gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                osc.start(audioContext.currentTime);
                osc.stop(audioContext.currentTime + duration);
            });
        }
        
        function guitarLoop() {
            if (!isPlaying) return;
            
            powerChord(164.81, 207.65, 0.8);  // E5
            setTimeout(() => {
                if (isPlaying) powerChord(174.61, 220.00, 0.8);  // F5
            }, 1000);
            setTimeout(() => {
                if (isPlaying) powerChord(196.00, 246.94, 0.8);  // G5
            }, 2000);
            setTimeout(() => {
                if (isPlaying) powerChord(164.81, 207.65, 0.8);  // E5
            }, 3000);
            
            setTimeout(guitarLoop, 4000);
        }
        
        guitarLoop();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    playDrums();
    playBass();
    playGuitar();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initMusic() {
    const musicBtn = document.getElementById('musicToggle');
    const musicIcon = document.getElementById('musicIcon');
    const musicText = document.getElementById('musicText');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Audio API
        if (window.AudioContext || window.webkitAudioContext) {
            console.log('Web Audio API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º)
            setTimeout(() => {
                                 if (!isPlaying) {
                     isPlaying = true;
                     createPunkTrack();
                     musicIcon.textContent = 'üîä';
                     musicText.textContent = '–ú–£–ó–´–ö–ê –í–ö–õ';
                     musicBtn.classList.remove('muted');
                     musicBtn.classList.add('playing');
                     
                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
                     const visualizer = document.getElementById('musicVisualizer');
                     if (visualizer) {
                         visualizer.classList.add('active');
                     }
                 }
            }, 1000);
            
        } else {
            throw new Error('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ:', error);
        musicBtn.classList.add('muted');
        musicIcon.textContent = 'üîá';
        musicText.textContent = '–ú–£–ó–´–ö–ê –ù–ï–î–û–°–¢–£–ü–ù–ê';
        musicBtn.disabled = true;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏
    initMusic();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    const cards = document.querySelectorAll('.image-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(50px)';
        
        setTimeout(() => {
            card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 200);
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    const buttons = document.querySelectorAll('.action-btn');
    buttons.forEach((button, index) => {
        button.style.opacity = '0';
        button.style.transform = 'scale(0.8)';
        
        setTimeout(() => {
            button.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            button.style.opacity = '1';
            button.style.transform = 'scale(1)';
        }, 1000 + index * 150);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            this.style.transform = 'translateY(-5px) scale(1.05)';
        });

        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
function createParticles() {
    const particlesContainer = document.createElement('div');
    particlesContainer.style.position = 'fixed';
    particlesContainer.style.top = '0';
    particlesContainer.style.left = '0';
    particlesContainer.style.width = '100%';
    particlesContainer.style.height = '100%';
    particlesContainer.style.pointerEvents = 'none';
    particlesContainer.style.zIndex = '1';
    document.body.appendChild(particlesContainer);

    for (let i = 0; i < 20; i++) {
        setTimeout(() => {
            const particle = document.createElement('div');
            particle.style.position = 'absolute';
            particle.style.width = '3px';
            particle.style.height = '3px';
            particle.style.backgroundColor = '#ff6b35';
            particle.style.borderRadius = '50%';
            particle.style.opacity = '0.6';
            
            const startX = Math.random() * window.innerWidth;
            const startY = window.innerHeight;
            
            particle.style.left = startX + 'px';
            particle.style.top = startY + 'px';
            
            particlesContainer.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü—ã
            let y = startY;
            let opacity = 0.6;
            
            const animate = () => {
                y -= 2;
                opacity -= 0.005;
                
                particle.style.top = y + 'px';
                particle.style.opacity = opacity;
                
                if (y > -10 && opacity > 0) {
                    requestAnimationFrame(animate);
                } else {
                    particle.remove();
                }
            };
            
            animate();
        }, i * 500);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(createParticles, 2000);
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(createParticles, 10000);
});